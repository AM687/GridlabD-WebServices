// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <memory>
#include <staff/utils/SharedPtr.h>
#include <staff/utils/Log.h>
#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/DataObject.h>
#include <staff/common/Attribute.h>
#include <staff/common/Operation.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include <staff/client/IProxyAllocator.h>
#include <staff/client/ICallback.h>
#include <staff/client/Options.h>
#include "controller_serverProxy.h"

namespace staff
{

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// classes implementation



// proxy allocator
class controller_serverProxyAllocator: public staff::IProxyAllocator
{
public:
  controller_serverProxyAllocator()
  {
    try
    {
      staff::ServiceFactory::Inst().RegisterProxyAllocator(typeid(controller_server).name(), *this);
    }
    STAFF_CATCH_ALL_DESCR("Failed to register proxy allocator controller_server");
  }

  virtual staff::IService* AllocateProxy(const std::string& sServiceUri,
                                         const std::string& sSessionId,
                                         const std::string& sInstanceId)
  {
    std::auto_ptr<controller_serverProxy> tpProxy(new controller_serverProxy);
    tpProxy->Init(sServiceUri, sSessionId, sInstanceId);
    return tpProxy.release();
  }

  virtual staff::IService* AllocateProxy(const std::string& sBaseUri,
                                         const std::string& sServiceName,
                                         const std::string& sSessionId,
                                         const std::string& sInstanceId)
  {
    std::auto_ptr<controller_serverProxy> tpProxy(new controller_serverProxy);
    tpProxy->Init(sBaseUri + (sServiceName.empty() ? "controller_server" : sServiceName),
                  sSessionId, sInstanceId);
    return tpProxy.release();
  }
};

controller_serverProxyAllocator tcontroller_serverProxyAllocatorInitializer;

// asynch proxies


// service proxy
controller_serverProxy::controller_serverProxy()
{
}

controller_serverProxy::~controller_serverProxy()
{
  try
  {
    Deinit();
  }
  STAFF_CATCH_ALL;
}

void controller_serverProxy::Init(const std::string& sServiceUri, const std::string& sSessionId, const std::string& sInstanceId)
{
  staff::IService::Init("controller_server", sSessionId, sInstanceId);
  m_sServiceUri = !sServiceUri.empty() ? sServiceUri : "http://10.96.12.46:9090/axis2/services/controller_server";
  m_tClient.Init(m_sServiceUri);
  staff::Options& rOptions = m_tClient.GetOptions();
  rOptions.SetDefaultNamespace("http://tempui.org/", "");
  rOptions.SetSoapVersion(staff::Options::Soap11);

  rOptions.SetSessionId(sSessionId);

  if (!sInstanceId.empty())
  {
    staff::Operation tOperation("CreateInstance");
    tOperation.Request().CreateChild("sInstanceId").SetText(sInstanceId);
    tOperation.SetResponse(m_tClient.Invoke(tOperation.Request()));
    if (m_tClient.GetLastResponseHasFault())
    {
      STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                             tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
      STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " +
                  tOperation.GetResponse().ToString()); // other fault
    }
    rOptions.SetInstanceId(sInstanceId);
  }
}

void controller_serverProxy::Deinit()
{
  if (!staff::IService::GetInstanceId().empty())
  {
    staff::Operation tOperation("FreeInstance");
    tOperation.Request().CreateChild("sInstanceId").SetText(staff::IService::GetInstanceId());
    tOperation.SetResponse(m_tClient.Invoke(tOperation.Request()));
    if (m_tClient.GetLastResponseHasFault())
    {
      STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                             tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
      STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " +
                  tOperation.GetResponse().ToString()); // other fault
    }
  }
}

staff::ServiceClient* controller_serverProxy::GetClient()
{
  return &m_tClient;
}


int controller_serverProxy::COinit(double market_init_price, int pstate, int market_period, int control_mode, double psetpoint, double base_setpoint, double heating_base_setpoint, double cooling_base_setpoint)
{
  staff::Operation tOperation("COinit", "COinitResult");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.SetNamespaceUriGenPrefix("http://tempui.org/");
  rdoRequest.CreateChild("market_init_price", market_init_price);
  rdoRequest.CreateChild("pstate", pstate);
  rdoRequest.CreateChild("market_period", market_period);
  rdoRequest.CreateChild("control_mode", control_mode);
  rdoRequest.CreateChild("psetpoint", psetpoint);
  rdoRequest.CreateChild("base_setpoint", base_setpoint);
  rdoRequest.CreateChild("heating_base_setpoint", heating_base_setpoint);
  rdoRequest.CreateChild("cooling_base_setpoint", cooling_base_setpoint);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  int tReturn = 0;
  rdoResult.GetValue(tReturn);
  return tReturn;
}

int controller_serverProxy::COpresync(double base_setpoint, double psetpoint, int control_mode)
{
  staff::Operation tOperation("COpresync", "COpresyncResult");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.SetNamespaceUriGenPrefix("http://tempui.org/");
  rdoRequest.CreateChild("base_setpoint", base_setpoint);
  rdoRequest.CreateChild("psetpoint", psetpoint);
  rdoRequest.CreateChild("control_mode", control_mode);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  int tReturn = 0;
  rdoResult.GetValue(tReturn);
  return tReturn;
}

double controller_serverProxy::COsync(double load, double demand, int pstate, double total, double target, double pAvg, double pStd, double base_setpoint, int control_mode, double market_current_frameclearing_price)
{
  staff::Operation tOperation("COsync", "COsyncResult");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.SetNamespaceUriGenPrefix("http://tempui.org/");
  rdoRequest.CreateChild("load", load);
  rdoRequest.CreateChild("demand", demand);
  rdoRequest.CreateChild("pstate", pstate);
  rdoRequest.CreateChild("total", total);
  rdoRequest.CreateChild("target", target);
  rdoRequest.CreateChild("pAvg", pAvg);
  rdoRequest.CreateChild("pStd", pStd);
  rdoRequest.CreateChild("base_setpoint", base_setpoint);
  rdoRequest.CreateChild("control_mode", control_mode);
  rdoRequest.CreateChild("market_current_frameclearing_price", market_current_frameclearing_price);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  double tReturn = 0;
  rdoResult.GetValue(tReturn);
  return tReturn;
}

double controller_serverProxy::COpostsync(int control_mode, double base_setpoint)
{
  staff::Operation tOperation("COpostsync", "COpostsyncResult");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.SetNamespaceUriGenPrefix("http://tempui.org/");
  rdoRequest.CreateChild("control_mode", control_mode);
  rdoRequest.CreateChild("base_setpoint", base_setpoint);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  double tReturn = 0;
  rdoResult.GetValue(tReturn);
  return tReturn;
}


